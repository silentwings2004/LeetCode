package LC3601_3900;
import java.util.*;
public class LC3631_SortThreatsbySeverityandExploitability {
    /**
     * You are given a 2D integer array threats, where each threats[i] = [IDi, sevi, expi]
     *
     * IDi: Unique identifier of the threat.
     * sevi: Indicates the severity of the threat.
     * expi: Indicates the exploitability of the threat.
     * The score of a threat i is defined as: score = 2 Ã— sevi + expi
     *
     * Your task is to return threats sorted in descending order of score.
     *
     * If multiple threats have the same score, sort them by ascending ID.
     *
     * Input: threats = [[101,2,3],[102,3,2],[103,3,3]]
     * Output: [[103,3,3],[102,3,2],[101,2,3]]
     *
     * Input: threats = [[101,4,1],[103,1,5],[102,1,5]]
     * Output: [[101,4,1],[102,1,5],[103,1,5]]
     *
     * Constraints:
     *
     * 1 <= threats.length <= 10^5
     * threats[i] == [IDi, sevi, expi]
     * 1 <= IDi <= 10^6
     * 1 <= sevi <= 10^9
     * 1 <= expi <= 10^9
     * All IDi are unique
     * @param threats
     * @return
     */
    // time = O(nlogn), space = O(n)
    public int[][] sortThreats(int[][] threats) {
        int n = threats.length;
        long[][] w = new long[n][3];
        for (int i = 0; i < n; i++) {
            int id = threats[i][0], sev = threats[i][1], exp = threats[i][2];
            w[i] = new long[]{2L * sev + exp, id, i};
        }
        Arrays.sort(w, (o1, o2) -> o1[0] != o2[0] ? Long.compare(o2[0], o1[0]) : Long.compare(o1[1], o2[1]));
        int[][] res = new int[n][3];
        for (int i = 0; i < n; i++) {
            int idx = (int)w[i][2];
            res[i] = threats[idx];
        }
        return res;
    }
}